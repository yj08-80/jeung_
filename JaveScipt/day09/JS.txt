[자바스크립트]
    HTML : 하이퍼텍스트 마크업 언어 : 웹문서 뼈대 - 마크업 언어
    CSS : 캐스케이드 스타일 시트 언어 : 웹문서 디자인 - 스타일 언어
    JS : 자바 스크립트 : 웹문서 동적 - 프로그래밍 언어
        -HTML 안에 CSS와 JS가 포함
        1.사용처 : 웹프로그래밍, 서버개발, 소프트웨어 개발
        2.라이브러리 종류
            1.REACT, ANGULAR, VUE, JQUERY
            2.NODE.JS : 2009년 이후 백엔드 역할
            3.REACT NATIVE : 앱(지원중단)
            4.REACT NATIBE WEB: 웹+앱
            -> REACT.JS + NEXT.JS + SPRING
            5.NW.JS : 소프트웨어
        3.사용법
            - 주의할 점 : HTML 없이 JS 파일만으로 실행이 불가능하다.
            (방법1):
            1.HTML 파일 내 <body> 마크업 안에서 가장 아래
            2.<scirpt> 마크업을 이용하여 JS코드를 작성한다.

            (방법2):
            1.JS파일 생성하여 JS코드를 작성한다.
            2.HTML 파일 내 <body> 마크업 안에서 가장 아래
            3.<scipt src="JS파일경로"></script>

        4.주석
        - HTML : <!--내용-->
        - CSS : /*내용*/
        - JS : /*여러줄 주석 내용*/
                //한줄주석내용 
        5.기본 용어
            1.데이터(Data/자료) : 사실이나 값을 그대로 나타낸 객관적인 자료
            2.리터럴() : 프로그래밍 언어에서 소스코드에 직접 표현한 값
                -> 이유 : 컴퓨터는 0과1(2진수)밖에 모른다 -> 각 프로그래밍언어 회사들은 0과1로 조합한 미리 만들어진 단어가 필요하다.
                -> 개발자가 사용할 수 있도록 미리 정해진 값들을 넣어놨다 (상수 = 수정할 수 없는 고정값)
                ->종류 : 9(숫자), a(문자), true(참) 프로그래밍 언어 회사에서 종류 정한다 <자료의타입/종류(자료형)>
            3.자료형 : 프로그래밍언어에서 자료들을 분류하는 방법
                -> 분류 왜? 데이터를 처리하는데 효율적으로 하기 위해서
                -> 각 프로그래밍 언어들 별로 다르다.
        6.JS 자료형
            1.숫자형(Number)            :10, 3.14
            2.문자열(String)            :"안녕하세요", '안녕하세요' 큰따옴표나 작은따옴표로 감싼 자료
            3.불리언(Boolean)           :true 또는 false
            4.배열(Array)               :[자료, 자료, 자료] 대괄호 안에 ,쉼표 구분하여 여러 자료들을 감싼 자료
            5.객체(Object)              :{속성명:자료, 속성명:자료} 중괄호 안에 ,쉼포 구분하여 이름과 값이 한 쌍을 이루는 자료
            6.특수 : 
                undefined:자료가 할당되지 않은 상태
                null:자료가 존재하지 않음
        ** 미리 정해진 기능이 포함된 특수문자/문자열 : 키워드
            [], {}, console, Number, String, if, for 등등


[문자열 : 템플릿 리터럴] : 문자열과 변수 또는 식 연결하는 표현
    (방법1) "문자열" + 변수명 + "문자열"
    (방법2) `문자열 ${변수명} 문자열`
[문자열 : 이스케이프 문자 ] : 백슬래시 이용한 특수 기호
    \\ : 백슬래시 출력
    \' : 작은따옴표 출력
    \: : 큰따옴표 출력
    \n : 줄바꿈 처리
    \t : 탭 처리

[배열]
    1.여러 자료들을 순서대로 저장하는 *자료*
    2.인덱스 : 배열 내 자료들이 저장된 순서번호 "0번 시작된다"
    3.사용법
        (1) 선언 : let/const 변수명 = [ 자료, 자료, 자료 ]
        (2) 호출 : 변수명 or 변수명[인덱스]
        (3) 수정 : 변수명 = [ 새로운배열 ] or 변수명[인덱스] = 새로운값
        (4) 배열 내 자료 총갯수 : 변수명.length 

[배열 : 자주 되는 함수]
    1.변수명.push( 새로운값 ) : 배열 내 새로운 요소 추가
    2.변수명.splice( 인덱스, 개수 ) : 배열 내 지정한 인덱스부터 개수 요소 삭제
    3.변수명.indexOf( 찾을값 ) : 배열 내 '찾을값' 존재하는 인덱스 번호 반환, 없으면 -1 반환 

[자료형 형변환]
    1.자동 타입변환
        (1)"문자열" *1     : "문자열" -> 숫자형 변환
        (2)"문자열" + 숫자형 : "문자열"+숫자형 -> 문자열 변환
    2.수동 타입변환
        (1) Number()        : 문자열 -> 숫자형
        (2) parseInt()      : 문자열 -> 숫자형(정수)
        (3) parseFloat()    : 문자열 -> 숫자형(실수)
        (4) String()        : 그 외 타입 -> 문자열
        (5) Boolean()       : 문자열 -> 논리형

[연산자]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과 <미만 >=이상 <=이하 ==같다 !=같지않다 ===타입까지같다
    4. 논리연산자 : &&이면서 ||이거나 !부정
    5. 대입연산자 : =대입 +=더한후대입 -=뺀후대입 *= /= %=
    6. 증감연산자 : ++변수명, 변수명++, --변수명, 변수명--
    7. 삼항연산자 : 조건 ? 참 : 거짓, 중첩으로 사용하면 조건1 ? 참1 : 조건2 ? 참2 : 조건3 ? 참3


[조건문] : 특정한 조건의 논리(true/false) 결과에 따라서 명령어를 처리한다.
    1.if(조건) 참일때코드
    2.if(조건) {참일때코드;}
    3.if(조건) {참일때코드;}
      else {거짓일때코드;}
    4.if(조건) {참1일때코드;}
      else if{참2일때코드;}
      else{거짓일때코드;}
    5.if(조건A){
        if(조건B){}
        else{}
    }else{
        if(조건B){}
        else{}
    }

    [ 반복문 ] : 특정한 조건의 논리 결과가 true일때 명령어들을 반복 처리
        1. for( 초기값 ; 조건문 ; 증감식 ){
            명령어(코드);
            }
        2. 실행순서 : (1)초기값 -> (2)조건문 true -> (3)명령어 -> (4)증감식
                                (5)조건문 true -> (6)명령어 -> (7)증감식
                                (8)조건문 true -> (9)명령어 -> (10)증감식
        * 주의할점 : 조건이 true일때만 실행되므로 조건식과 증감식 관계가 무조건 true일 때 무한루프
        3. 배열/리스트와 반복문 관계
            (1) 배열의 인덱스는 자료들을 0부터 순서대로 저장 번호 부여


            (2) 마지막 인덱스 : 변수명.length-1
                for( let index = 0 ; index <= 변수명.length-1 ; index++ ){
                    변수명[index];
                }
        4. for문 중첩 : 일반적으로 행과 열 관계일 때는 *행* 먼저 for문을 작성, 좌표 관계로 생각
            for( ){
                for( ){ }
            }
            *주의할 점 : 상위 for문이 1번 반복될 때 하위 for문은 전체 반복된다.
            (예) 구구단 : 단마다 곱을 출력
                2*1 2*2 2*3 2*4 2*5 ...
            
            for( 단 ){
                for( 곱 ){ }
            }

            for( 곱 ){
                for( 단 ){}
            } ---> 2*1 3*1 4*1 5*1

        5.반복문 제어 키워드
            (1) continue : 가장 가까운 for문의 증감식 흐름 이동
            (2) break : 가장 가까운 for문의 증감식 흐름 탈출
            (3) for( ; ; ) : 무한루프


[ 프로그래밍 관점 ]
    - 프로그래밍 구성하기 위한 접근 방식
    1. 절차지향 프로그래밍 : c언어
        (1) 함수(절차) 이용한 순서가 정해진 작업
        (2) 코드가 위에서 아래로 순차적으로 실행, 단순하다
    2. 객체지향 프로그래밍 : JAVA, JS, Python, C++
        (1) 객체(데이터/기능)을 *하나로 묶어서* 처리하는 작업
        (2) 코드의 재사용이나 확장성이 좋음, 복잡하다

[ 객체 ]
    1. 정의
    (1) 객체(Object)    : 주체(나/대상)가 아닌 다른 실체(타인)
        주체(Subject)   :'나/대상'라는 실체, 중심
    (2) 주체: '강사님' 강사 (해당 클래스를 진행하는 주체)
             주체 기준으로 '유재석' 수강생 ( 해당 클래스를 듣는 수강생 객체)

             '유재석' 수강생 (주체) ---> '김현수' 강사 (객체)

    2. 생활 속 객체란? 모두( 물리적 개념, 논리적 개념 전부 : 어떠한 대상을 정의(데이터와 기능)가능한 것 )
        -공기 객체, 안경 객체, 컴퓨터 객체, 강의 객체, 사람 객체 = 전부
        ---> 개발자( 주체자 ) 관점에서 컴퓨터 속( 객체 )을 만든다.

[ JS 객체 ]
    1. 종류
        (1) 클래스 기반의 객체 : class(객체를 만들기 위한 틀/설계도) *자바에서는 필수
        (2) 클래스가 없는 객체 : { }
    2. 배열과 객체의 차이점
        (1) 배열 : [ ]
            - 인덱스, 자료 순서 있다, 여러 목록
        (2) 객체 : { }
            - 속성명, 자료 순서 없다, 하나의 정보
        *주의할 점 : 변수는 배열과 객체 자료를 1개 저장하는 메모리 공간
        const var1 = [ 10 , 'hello' ] - 자료 2개 저장하는 배열 자료 1개를 변수에 저장
        const var2 = { props1 : 10, props2 : 'hello' } - 자료 2개를 속성으로 구분하여 객체 자료 1개를 변수에 저장
            -> 변수 vs 자료(자료형 : 숫자/문자열/불리언/특수/배열/객체)


    *예시 : 제품 목록
            1) const 제품목록 = [ [ "콜라", 1000 ], [ "사이다" , 2000 ] [ "환타" , 3000] ];
            2) const 제품목록 = { { name : "콜라", price : 1000} },{ { name : "사이다", price : 2000}}...
            3) const 제품목록 = 
                [ { name : "콜라" , price : 1000 },{ name : "사이다" , price : 2000 },{ name : "환타" , price : 3000 } ]
                - 정보를 만들 때는 객체화하고 동일한 정보( 객체 )들을 여러개 묶을 때는 배열을 사용

    3. 사용법
        (1) 객체 선언 : 속성명과 자료를 한 쌍으로 엔트리라고 하고 ,(쉼표) 구분하여 여러개 엔트리{}를 감싼다.
                { 속성명 : 자료1 , 속성명 : 자료2 }
                * 속성명 (properties) : 하나의 객체에서 중복 불가, 특수문자 포함한 경우 "" 감싸야 함
                * 자료(value) : 리터럴(숫자/문자열/불리언)배열/객체/함수
        (2) 객체도 *하나* 자료로써 변수에 대입될 수 있다.
            let 변수명 = {}
            const 상수명 = {}
        (3) 객체 호출
            예) let a = 3 ;
                console.log( a );
                let b = { a : "c" };
                console.log( b );
                console.log( { a : "c" } );
            객체 전체 : 변수명
            객체 내 특정한 속성값 : 변수명.속성명
            객체 내 특정한 속성값2 : 변수명["속성명"]
            관련 함수
                - Object.keys( 변수명 ) : 객체 내 모든 속성명(key)을 배열로 반환
                - Object.values( 변수명 ) : 객체 내 모든 변수명(value)을 배열로 반환
                - Object.entries( 변수명 ) : 객체 내 모든 엔트리(entry)를 배열로 반환
        (4) 객체 내 속성 다루기
            - 속성 추가 : 변수명.새로운 속성명 = 자료
            - 속성값 수정 : 변수명.속성명 = 새로운 자료
            - 속성 삭제 : delete 변수명.속성명
            - 속성 확인 : '찾을 속성명' in 변수명 , 찾을 속성명이 존재하면 true/false
        
        (*) 관례적으로 서로 다른 의미의 자료들은 객체로 묶어주고 동일한 의미의 자료들은 배열로 묶는다.
        